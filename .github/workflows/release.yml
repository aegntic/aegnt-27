name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
            archive_suffix: "linux-x64.tar.gz"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
            archive_suffix: "windows-x64.zip"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
            archive_suffix: "macos-x64.tar.gz"
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""
            archive_suffix: "macos-arm64.tar.gz"

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binaries
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create release directory
      run: mkdir -p release
    
    - name: Copy binaries (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/aegnt-27-lite${{ matrix.binary_suffix }} release/
        cp target/${{ matrix.target }}/release/aegnt-27-pro${{ matrix.binary_suffix }} release/
        cp target/${{ matrix.target }}/release/aegnt-27-enterprise${{ matrix.binary_suffix }} release/
        cp README.md release/
        cp LICENSE release/
        cp CHANGELOG.md release/
    
    - name: Copy binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy "target\${{ matrix.target }}\release\aegnt-27-lite${{ matrix.binary_suffix }}" release\
        copy "target\${{ matrix.target }}\release\aegnt-27-pro${{ matrix.binary_suffix }}" release\
        copy "target\${{ matrix.target }}\release\aegnt-27-enterprise${{ matrix.binary_suffix }}" release\
        copy README.md release\
        copy LICENSE release\
        copy CHANGELOG.md release\
      shell: cmd
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar czf ../aegnt27-${{ github.ref_name }}-${{ matrix.archive_suffix }} *
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        powershell Compress-Archive -Path * -DestinationPath ../aegnt27-${{ github.ref_name }}-${{ matrix.archive_suffix }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: aegnt27-${{ github.ref_name }}-${{ matrix.archive_suffix }}
        draft: false
        prerelease: false
        generate_release_notes: true

  publish-crate:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish --token $CARGO_REGISTRY_TOKEN

  publish-mcp-server:
    name: Publish MCP Server to NPM
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: cd mcp-server && bun install
    
    - name: Build MCP server
      run: cd mcp-server && bun run build
    
    - name: Publish to NPM
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd mcp-server
        echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
        bun publish --access public